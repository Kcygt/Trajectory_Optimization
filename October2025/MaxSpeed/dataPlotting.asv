close all
% publish('plottingData.m', 'html');
for i = 8:10
    % Construct filenames
    PdataFile = sprintf('Pdata%d.mat', i);
    SdataFile = sprintf('Sdata%d.mat', i);
    GdataFile = sprintf('Gdata%d.mat', i);
    
    % Check which files exist
    hasPdata = exist(PdataFile, 'file') == 2;
    hasSdata = exist(SdataFile, 'file') == 2;
    hasGdata = exist(GdataFile, 'file') == 2;
    
    % Only proceed if at least one file exists
    if hasPdata || hasSdata || hasGdata
        % Load available data
        if hasPdata
            Pdata = load(PdataFile);
            fprintf('Loaded: %s\n', PdataFile);
        else
            Pdata = [];
            fprintf('Missing: %s\n', PdataFile);
        end
        
        if hasSdata
            Sdata = load(SdataFile);
            fprintf('Loaded: %s\n', SdataFile);
        else
            Sdata = [];
            fprintf('Missing: %s\n', SdataFile);
        end
        
        if hasGdata
            Gdata = load(GdataFile);
            fprintf('Loaded: %s\n', GdataFile);
        else
            Gdata = [];
            fprintf('Missing: %s\n', GdataFile);
        end
        
        % Call plotting function with available data
        plotPhantomSimulation(Pdata, Sdata, Gdata, sprintf('DataSet%d', i));
    else
        fprintf('Skipping dataset %d - no data files exist\n', i);
    end
end

function plotPhantomSimulation(Pdata, Sdata, Gdata, figPrefix)
    
    % Initialize flags for available data
    hasPdata = ~isempty(Pdata);
    hasSdata = ~isempty(Sdata);
    hasGdata = ~isempty(Gdata);
    
    % ---- Phantom Desired and Actual ----
    if hasPdata
        PqDes = Pdata.Pdata(:,1:3);
        PqdDes = Pdata.Pdata(:,4:6);
        PqAct = Pdata.Pdata(:,7:9);
        PqdAct = Pdata.Pdata(:,10:12);
    end

    % ---- Extract time vectors ----
    if hasSdata
        Stime = Sdata.tOpt;
        if hasPdata
            % Align Phantom time to simulation duration
            Ptime = linspace(0, Stime(end), size(PqAct,1));
        end
    end
    
    if hasGdata
        Gtime = Gdata.Hys;
    end

    % ---- Simulation Desired and Actual ----
    if hasSdata
        SqDes = Sdata.yOpt(:,1:3);
        SqdDes = Sdata.yOpt(:,4:6);
        SqAct = Sdata.yOpt(:,7:9);
        SqdAct = Sdata.yOpt(:,10:12);
    end
    
    % ---- Gain Data ----
    if hasGdata
        GqDes = Gdata.yOut1(:,1:3);
        GqdDes = Gdata.yOut1(:,4:6);
        GqAct = Gdata.yOut1(:,7:9);
        GqdAct = Gdata.yOut1(:,10:12);
    end

    % ---- Target points ----
    if hasSdata && isfield(Sdata,'xTarget')
        xTarget = Sdata.xTarget;
    else
        xTarget = [];
    end
    
    % ---- Control Points ----
    if hasSdata && isfield(Sdata, 'xCtrl') && ~isempty(Sdata.xCtrl)
        xCtrl = Sdata.xCtrl;
    else
        xCtrl = [ ...
          -0.100792879495735  -0.041846054140405   0.002460251373200
           0.083694536391680  -0.119977727328716  -0.001215467863000 ];
    end
    
    % ---- Forward Kinematics (assumes FK exists on path) ----
    if hasSdata
        [SxDes,SyDes,SzDes] = FK(SqDes(:,1),SqDes(:,2),SqDes(:,3));
        [SxAct,SyAct,SzAct] = FK(SqAct(:,1),SqAct(:,2),SqAct(:,3));
    end
    
    if hasPdata
        [PxAct,PyAct,PzAct] = FK(PqAct(:,1),PqAct(:,2),PqAct(:,3));
    end
    
    if hasGdata
        [GxDes,GyDes,GzDes] = FK(GqDes(:,1),GqDes(:,2),GqDes(:,3));
        [GxAct,GyAct,GzAct] = FK(GqAct(:,1),GqAct(:,2),GqAct(:,3));
    end

    % ---- Compute minimum distances to targets ----
    if ~isempty(xTarget)
        nTargets = size(xTarget, 1);
        TargetMinSim  = NaN(nTargets, 1);
        TargetMinPthm = NaN(nTargets, 1);
        TargetMinGain = NaN(nTargets, 1);
        
        for ii = 1:nTargets
            if hasSdata
                diffsSim = [SxAct, SyAct, SzAct] - xTarget(ii, :);
                TargetMinSim(ii) = min(sqrt(sum(diffsSim.^2, 2)));
            end
            if hasPdata
                diffsPthm = [PxAct, PyAct, PzAct] - xTarget(ii, :);
                TargetMinPthm(ii) = min(sqrt(sum(diffsPthm.^2, 2)));
            end
            if hasGdata
                diffsGain = [GxAct, GyAct, GzAct] - xTarget(ii, :);
                TargetMinGain(ii) = min(sqrt(sum(diffsGain.^2, 2)));
            end
        end
    else
        nTargets = 0;
        TargetMinSim = []; TargetMinPthm = []; TargetMinGain = [];
    end
    
    % =================== Begin Plotting ===================
    fig1 = figure('Name',[figPrefix ' - 3D Trajectory']); hold on; grid on; view(3);
    
    % ---- Fix aspect ratio and limits ----
    axis vis3d;
    daspect([1 1 1]);
    xlim([-0.15 0.15]);
    ylim([-0.15 0.15]);
    zlim([-0.15 0.15]);

    % ---- Home position (single legend entry) ----
    plot3(0, 0, 0, 'ko', 'MarkerFaceColor','k', 'DisplayName', 'Home Position');

    % ---- Desired and Actual Trajectories ----
    if hasSdata
        plot3(SxDes, SyDes, SzDes, 'g', 'LineWidth', 2, 'DisplayName', 'Desired Trajectory');
        plot3(SxAct, SyAct, SzAct, 'r', 'LineWidth', 2, 'DisplayName', 'Simulation Actual');
    end
    if hasPdata
        plot3(PxAct, PyAct, PzAct, 'k--', 'LineWidth', 2, 'DisplayName', 'Phantom Trajectory');
    end
    if hasGdata
        plot3(GxAct, GyAct, GzAct, 'm', 'LineWidth', 2, 'DisplayName', 'Gain Trajectory');
    end

    % ---- Target points ----
    if ~isempty(xTarget)
        plot3(xTarget(:,1), xTarget(:,2), xTarget(:,3), 'p', ...
              'MarkerFaceColor','k','MarkerSize',10,'DisplayName','Target Points');
    end

    % ---- Control points ----
    if ~isempty(xCtrl)
        plot3(xCtrl(:,1), xCtrl(:,2), xCtrl(:,3), 'd', ...
              'MarkerSize',8,'LineWidth',1.5,'DisplayName','Control Points');
        for kk = 1:size(xCtrl,1)
            text(xCtrl(kk,1), xCtrl(kk,2), xCtrl(kk,3), sprintf(' C%d', kk), ...
                 'FontSize',9,'VerticalAlignment','bottom','HorizontalAlignment','left');
        end
    end

    % ---- Labels ----
    xlabel('X (m)'); ylabel('Y (m)'); zlabel('Z (m)');
    title('3D Cartesian Space Trajectory');
    legend('Location','eastoutside');

    % ========= Joint-space plots (combined: Desired, Simulation, Phantom [+ Gain]) =========
    lw = 1.6;

    % ---------- POSITIONS (combined) ----------
    if (hasSdata || hasPdata || hasGdata)
        figure('Name',[figPrefix ' - Joint Positions']);
        tiledlayout(3,1,'Padding','compact','TileSpacing','compact');

        posHandles = gobjects(0);   % ensure variable exists
        posLabels  = {};
        axPos = gobjects(1,3);      % keep axes refs to place the legend

        for j = 1:3
            ax = nexttile; axPos(j) = ax; hold(ax,'on'); grid(ax,'on');

            % Desired & Simulation (Sdata)
            if hasSdata && exist('Stime','var') && ~isempty(SqDes) && ~isempty(SqAct)
                hDes = plot(ax, Stime, SqDes(:,j), '-', 'LineWidth', lw, 'DisplayName','Desired');
                hSim = plot(ax, Stime, SqAct(:,j), '-', 'LineWidth', lw, 'DisplayName','Simulation');
                if j == 1
                    posHandles = [posHandles, hDes, hSim];
                    posLabels  = [posLabels,  {'Desired','Simulation'}];
                end
            end

            % Phantom (Pdata actual) — semi-transparent
            if hasPdata && exist('Ptime','var') && ~isempty(PqAct)
                hP = plot(ax, Ptime, PqAct(:,j), '.-', 'LineWidth', lw, ...
                          'Color', [0 0 0 0.5], 'DisplayName','Phantom');
                if j == 1
                    posHandles = [posHandles, hP]; posLabels = [posLabels, {'Phantom'}];
                end
            end

            % Gain (optional)
            if hasGdata && exist('Gtime','var') && ~isempty(GqAct)
                hG = plot(ax, Gtime, GqAct(:,j), ':', 'LineWidth', lw, 'DisplayName','Gain');
                if j == 1
                    posHandles = [posHandles, hG]; posLabels = [posLabels, {'Gain'}];
                end
            end

            ylabel(ax, sprintf('q_%d (rad)', j));
            if j == 1, title(ax,'Joint Positions'); end
            if j == 3, xlabel(ax,'Time (s)'); end
        end

        % One legend for the whole figure — only if we have handles
        if ~isempty(posHandles)
            legend(axPos(end), posHandles, posLabels, 'Location','bestoutside');
        end
    end

    % ---------- VELOCITIES (combined) + switching-time lines & section labels ----------
    if (hasSdata || hasPdata || hasGdata)
        figure('Name',[figPrefix ' - Joint Velocities']);
        tiledlayout(3,1,'Padding','compact','TileSpacing','compact');

        velHandles = gobjects(0);   % ensure variable exists
        velLabels  = {};
        axVel = gobjects(1,3);      % keep axes refs to place the legend
        hasWn = hasSdata && isfield(Sdata,'wnOpt') && numel(Sdata.wnOpt) >= 3;

        for j = 1:3
            ax = nexttile; axVel(j) = ax; hold(ax,'on'); grid(ax,'on');

            % Desired & Simulation (Sdata)
            if hasSdata && exist('Stime','var') && ~isempty(SqdDes) && ~isempty(SqdAct)
                hDes = plot(ax, Stime, SqdDes(:,j), '-', 'LineWidth', lw, 'DisplayName','Desired');
                hSim = plot(ax, Stime, SqdAct(:,j), '-', 'LineWidth', lw, 'DisplayName','Simulation');
                if j == 1
                    velHandles = [velHandles, hDes, hSim];
                    velLabels  = [velLabels,  {'Desired','Simulation'}];
                end
            end

            % Phantom (Pdata actual) — semi-transparent
            if hasPdata && exist('Ptime','var') && ~isempty(PqdAct)
                hP = plot(ax, Ptime, PqdAct(:,j), '.-', 'LineWidth', lw, ...
                          'Color', [0 0 0 0.5], 'DisplayName','Phantom'); % 50% opacity
                if j == 1
                    velHandles = [velHandles, hP]; velLabels = [velLabels, {'Phantom'}];
                end
            end

            % Gain (optional)
            if hasGdata && exist('Gtime','var') && ~isempty(GqdAct)
                hG = plot(ax, Gtime, GqdAct(:,j), ':', 'LineWidth', lw, 'DisplayName','Gain');
                if j == 1
                    velHandles = [velHandles, hG]; velLabels = [velLabels, {'Gain'}];
                end
            end

            % ---- Switching-time lines + Section labels (from wnOpt: 3x1 cell) ----
            if hasWn && exist('Stime','var') && ~isempty(Stime)
                % Each cell holds a 1x3 vector, index by joint j
                w1 = Sdata.wnOpt{1}(j);
                w2 = Sdata.wnOpt{2}(j);
                w3 = Sdata.wnOpt{3}(j);

                if all(isfinite([w1 w2 w3])) && all([w1 w2 w3] > 0)
                    d1 = 1./w1; d2 = 1./w2; % d3 = 1./w3; % not needed for t1/t2
                    t1 = d1;           % first switching time
                    t2 = d1 + d2;      % second switching time
                    xEnd = Stime(end);

                    % Vertical dashed lines (no legend entries)
                    if t1 > 0 && t1 < xEnd
                        xline(ax, t1, 'k--', 'LineWidth', 1, 'HandleVisibility','off');
                    end
                    if t2 > 0 && t2 < xEnd
                        xline(ax, t2, 'k--', 'LineWidth', 1, 'HandleVisibility','off');
                    end

                    % Section labels across [0,t1], [t1,t2], [t2,end]
                    yl = ylim(ax);
                    ytxt = yl(2) - 0.07*(yl(2)-yl(1)); % near top
                    mid1 = max(0, min(xEnd, 0.5*t1));
                    mid2 = max(0, min(xEnd, t1 + 0.5*(t2 - t1)));
                    mid3 = max(0, min(xEnd, t2 + 0.5*(xEnd - t2)));

                    text(ax, mid1, ytxt, 'Section 1', 'HorizontalAlignment','center', ...
                         'VerticalAlignment','top', 'Clipping','on');
                    text(ax, mid2, ytxt, 'Section 2', 'HorizontalAlignment','center', ...
                         'VerticalAlignment','top', 'Clipping','on');
                    text(ax, mid3, ytxt, 'Section 3', 'HorizontalAlignment','center', ...
                         'VerticalAlignment','top', 'Clipping','on');
                end
            end

            ylabel(ax, sprintf('dq_%d (rad/s)', j));
            if j == 1, title(ax,'Joint Velocities'); end
            if j == 3, xlabel(ax,'Time (s)'); end
        end

        % One legend for the whole figure — only if we have handles
        if ~isempty(velHandles)
            legend(axVel(end), velHandles, velLabels, 'Location','bestoutside');
        end
    end

    % ---- Display errors in Command Window ----
    if ~isempty(xTarget)
        fprintf('\n==== Target Point Error Summary ====\n');
        for k = 1:nTargets
            if hasSdata
                fprintf('Target %d Sim Err : %.6f m\n', k, TargetMinSim(k));
            end
            if hasPdata
                fprintf('Target %d Pthm Err: %.6f m\n', k, TargetMinPthm(k));
            end
            if hasGdata
                fprintf('Target %d Gain Err: %.6f m\n', k, TargetMinGain(k));
            end
        end
        fprintf('====================================\n\n');
    end
end
